{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "atomickitty.aws\n",
      "compthink\n",
      "/opt/conda/envs/python/bin/python\n",
      "3.8.3 (default, Jul  2 2020, 16:21:59) \n",
      "[GCC 7.3.0]\n",
      "sys.version_info(major=3, minor=8, micro=3, releaselevel='final', serial=0)\n",
      "/home/compthink/CECE-1330-PsuedoCourse/1-Lessons/Lesson13/PsuedoLesson\n"
     ]
    }
   ],
   "source": [
    "# Preamble script block to identify host, user, and kernel\n",
    "import sys\n",
    "! hostname\n",
    "! whoami\n",
    "print(sys.executable)\n",
    "print(sys.version)\n",
    "print(sys.version_info)\n",
    "! pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!--Script block to left align Markdown Tables-->\n",
       "<style>\n",
       "  table {margin-left: 0 !important;}\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<!--Script block to left align Markdown Tables-->\n",
    "<style>\n",
    "  table {margin-left: 0 !important;}\n",
    "</style>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 13 : Distributions and Probability Estimation Modeling\n",
    "\n",
    "![](http://54.243.252.9/engr-1330-psuedo-course/CECE-1330-PsuedoCourse/1-Lessons/Lesson13/PsuedoLesson/roulette.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Probability estimation modeling is the use of probability distributions (population data models) to model or explain behavior in observed (sample data) values.  Once a particular distribution is selected, then the concept of risk (probability) can be explored for events of varying magnitudes.\n",
    "\n",
    "Two important “extremes” in engineering:\n",
    "\n",
    "- Uncommon (rare) events (floods, nuclear plant explosions, etc.)\n",
    "\n",
    "- Common, almost predictable events (routine discharges, traffic accidents at a dangerous intersection, network failure on a due date, etc.)\n",
    "\n",
    "The probability distribution is just a model of the data, like a trend line for deterministic behavior; different distributions have different shapes, and domains and can explain certain types of observations better than others.\n",
    "\n",
    "Some Useful Distributions (data models) include:\n",
    "\n",
    "- Normal\n",
    "- LogNormal\n",
    "- Gamma\n",
    "- Weibull\n",
    "- Extreme Value (Gumbell)\n",
    "- Beta\n",
    "\n",
    "There are many more; they all have the common property that they integrate to unity on the domain $-\\infty~to ~ \\infty$.  \n",
    "\n",
    "The probability distributions (models) are often expressed as a density function or a cumulative distribution function. \n",
    "\n",
    "A useful notation using the Normal density function as an example is:\n",
    "\n",
    "$$ \\text{pdf(x)} = \\frac{1}{\\sigma \\sqrt{2\\pi}} \\times exp (-\\frac{(x-\\mu)^2}{2 \\sigma^2}) $$\n",
    "\n",
    "In the function, $x$ is the random variable, $\\mu$ is the **population** mean and $\\sigma^2$ is the **population** variance.  \n",
    "Often we don't actually know the population values so we estimate them from the collection of observations, in this context these are called the **sample** mean and variance.   Computation of the **sample** values is done using methods described in the earlier lesson on descriptive statistics.\n",
    "\n",
    "The integral of the $ \\text{pdf(x)} $ from $-\\infty~to ~ X $, produces a result called the cumulative distribution function.  The value $ X $ is not a random variable, but the integral the probability of the random variable $x$ being less than or equal to $X$.\n",
    "\n",
    "A useful notation using the Normal distribution as an example is:\n",
    "\n",
    "$$ F(X) =  \\int_{-\\infty}^X{\\frac{1}{\\sigma \\sqrt{2\\pi}} \\times exp (-\\frac{(x-\\mu)^2}{2 \\sigma^2}) dx}$$\n",
    "\n",
    "For the Normal distribution the integral is a special function called the Error function and can be written as:\n",
    "\n",
    "$$ F(X) =  \\frac{1}{2} \\cdot (1+erf(\\frac{(X-\\mu)}{\\sqrt{2} \\sigma}))$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normal Distribution Model (Using Math Package)\n",
    "\n",
    "Here we will build a normal distribution model, essentially the functions for the above equations, and then will plot them.\n",
    "Then we will sample from a list of numbers from 1 to 100 and see if the data model is representative of the sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def normdensity(x,mu,sigma):\n",
    "    weight = 1.0 /(sigma * math.sqrt(2.0*math.pi))\n",
    "    argument = ((x - mu)**2)/(2.0*sigma**2)\n",
    "    normdensity = weight*math.exp(-1.0*argument)\n",
    "    return normdensity\n",
    "\n",
    "def normdist(x,mu,sigma):\n",
    "    argument = (x - mu)/(math.sqrt(2.0)*sigma)    \n",
    "    normdist = (1.0 + math.erf(argument))/2.0\n",
    "    return normdist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standard Normal\n",
    "\n",
    "mu = 0\n",
    "sigma = 1\n",
    "\n",
    "x = []\n",
    "ypdf = []\n",
    "ycdf = []\n",
    "\n",
    "xlow = -10\n",
    "xhigh = 10\n",
    "howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = normdensity(xlow + i*xstep,mu,sigma)\n",
    "    ypdf.append(yvalue)\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue)  \n",
    "\n",
    "#x\n",
    "#ypdf\n",
    "#ycdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make the plot below, nothing too special just yet. Plots of the density (in blue) and cumulative density (probability) in red."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot # the python plotting library\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (10,5)) # generate a object from the figure class, set aspect ratio\n",
    "\n",
    "# Built the plot\n",
    "matplotlib.pyplot.plot(x, ypdf, color ='blue') \n",
    "matplotlib.pyplot.plot(x, ycdf, color ='red') \n",
    "matplotlib.pyplot.xlabel(\"Value of RV\") \n",
    "matplotlib.pyplot.ylabel(\"Density or Quantile Value\") \n",
    "matplotlib.pyplot.title(\"Normal Distribution Data Model\") \n",
    "matplotlib.pyplot.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exceedence Probability \n",
    "\n",
    "The purpose of distributions is to model data and allow us to estimate an answer to the question, what is the probability that we will observe a value of the random variable less than or equal to some sentinel value.  A common way to plot the quantile function is with accumulated probability on the horizontal axis, and random variable value on the vertical axis.\n",
    "Consider the figure below;\n",
    "\n",
    "![](http://54.243.252.9/engr-1330-psuedo-course/CECE-1330-PsuedoCourse/1-Lessons/Lesson13/PsuedoLesson/exceedence.png)\n",
    "\n",
    "The RV Value is about 50,000 indicated by the horizontal magenta line.  \n",
    "The blue curve is some data model, for instance one of our distributions below.\n",
    "The accumulated probability value at 50,000 is 0.1 or roughly 10% chance, but we also have to stipulate whether we are interested in less than or greater than.  \n",
    "\n",
    "In the figure shown, $P(x <= 50,000)~ =~1.00~-~0.1~= 0.9~or~90\\%$ and is a non-exceedence probability. In words we would state \n",
    "\"The probability of observing a value less than or equal to 50,000 is 90%\" the other side of the vertical line is the exceedence probability; in the figure $P(x > 50,000)~=~0.1~or~10\\%$.  In words we would state \"The probability of observing a value equal to or greater than 50,000 is 10%.\"  In risk analysis the sense of the probability is easily confusing, so when you can - make a plot.  Another way to look at the situation is to simply realize that the blue curve is the quantile function $F(X)$ with $X$ plotted on the vertical axis, and $F(X)$ plotted on the horizontal axis.\n",
    "\n",
    "Now lets put these ideas to use.  We will sample from the population of integers from 0 to 100, with replacement.  Any single pull from the population is equally likely. Lets take 25 samples (about 1/4 of the total population - usually we dont know the size of the population)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy\n",
    "\n",
    "population = []\n",
    "for i in range(0,101,1):\n",
    "    population.append(i)\n",
    "    \n",
    "sample = numpy.random.choice(population,25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lets get some statistics\n",
    "sample_mean = sample.mean()\n",
    "sample_variance = sample.std()**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sort the sample in place!\n",
    "sample.sort()\n",
    "# built a relative frequency approximation to probability, assume each pick is equally likely\n",
    "weibull_pp = []\n",
    "for i in range(0,len(sample),1):\n",
    "    weibull_pp.append((i+1)/(len(sample)+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (10,5)) # generate a object from the figure class, set aspect ratio\n",
    "\n",
    "# Built the plot\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample, color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='red') \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "matplotlib.pyplot.xlabel(\"Density or Quantile Value\") \n",
    "matplotlib.pyplot.title(\"Normal Distribution Data Model\") \n",
    "matplotlib.pyplot.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What a horrible plot, but lets now use the sample statistics to \"fit\" the data model (red) to the observations (blue). Notice we have already rotated the axes so this plot and ones that follow are structured like the \"Exceedence\" plot above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fitted Model\n",
    "\n",
    "mu = sample_mean\n",
    "sigma = math.sqrt(sample_variance)\n",
    "\n",
    "x = []\n",
    "ycdf = []\n",
    "\n",
    "xlow = 0\n",
    "xhigh = 100\n",
    "howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (10,5)) # generate a object from the figure class, set aspect ratio\n",
    "\n",
    "# Built the plot\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample,  color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x,  color ='red') \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "mytitle = \"Normal Distribution Data Model sample mean = : \" + str(sample_mean)+ \" sample variance =:\" + str(sample_variance)\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "popmean = numpy.array(population).mean()\n",
    "popvar = numpy.array(population).std()**2\n",
    "# Fitted Model\n",
    "\n",
    "mu = popmean\n",
    "sigma = math.sqrt(popvar)\n",
    "\n",
    "x = []\n",
    "ycdf = []\n",
    "\n",
    "xlow = 0\n",
    "xhigh = 100\n",
    "howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue) \n",
    "\n",
    "    \n",
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (10,5)) # generate a object from the figure class, set aspect ratio\n",
    "\n",
    "# Built the plot\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample, color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x,  color ='red') \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "mytitle = \"Normal Distribution Data Model Population mean = : \" + str(popmean)+ \" Population variance =:\" + str(popvar)\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some observations are in order:\n",
    "\n",
    "- The population is a uniformly distributed collection. \n",
    "- By random sampling, and keeping the sample size small, the sample distribution appears approximately normal.  \n",
    "\n",
    "Real things of engineering interest are not always bounded as shown here, the choice of the Weibull plotting position is not arbitrary.  The blue dot scatterplot in practice is called the empirical distribution function, or empirical quantile function.   \n",
    "\n",
    "Now we will apply these ideas to some realistic data.\n",
    "\n",
    "### Beargrass Creek\n",
    "\n",
    "The file `beargrass.txt` contains annual peak flows for Beargrass Creek.  The year is a water year, so the peaks occur on different days in each year; thus it is not a time series. Let's examine the data and see how well a Normal distribution data model fits, then estimate from the distribution the peak magnitude with exceedence probability 0.01 (1%-chance that will observe a value equal to or greater)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Peak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1945</td>\n",
       "      <td>1810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1946</td>\n",
       "      <td>791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1947</td>\n",
       "      <td>839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1948</td>\n",
       "      <td>1750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1949</td>\n",
       "      <td>898</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Peak\n",
       "0  1945  1810\n",
       "1  1946   791\n",
       "2  1947   839\n",
       "3  1948  1750\n",
       "4  1949   898"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas\n",
    "beargrass = pandas.read_csv('beargrass.txt')  #Reading a .csv file\n",
    "beargrass.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# beargrass.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Now we will just copy code (the miracle of cut-n-paste!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample = beargrass['Peak'].tolist() # put the peaks into a list\n",
    "sample_mean = numpy.array(sample).mean()\n",
    "sample_variance = numpy.array(sample).std()**2\n",
    "sample.sort() # sort the sample in place!\n",
    "weibull_pp = [] # built a relative frequency approximation to probability, assume each pick is equally likely\n",
    "for i in range(0,len(sample),1):\n",
    "    weibull_pp.append((i+1)/(len(sample)+1))\n",
    "################\n",
    "mu = sample_mean # Fitted Model\n",
    "sigma = math.sqrt(sample_variance)\n",
    "x = []; ycdf = []\n",
    "xlow = 0; xhigh = 1.2*max(sample) ; howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue) \n",
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (7,9)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample ,color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='red') \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "mytitle = \"Normal Distribution Data Model sample mean = : \" + str(sample_mean)+ \" sample variance =:\" + str(sample_variance)\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      31.000000\n",
       "mean     1599.258065\n",
       "std      1006.239500\n",
       "min       707.000000\n",
       "25%       908.000000\n",
       "50%      1250.000000\n",
       "75%      1945.000000\n",
       "max      5200.000000\n",
       "Name: Peak, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beargrass['Peak'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A 1% chance exceedence is on the right side of the chart, it is the compliment of 99% non-exceedence, in terms of our quantile function we want to find the value $X$ that returns a quantile of 0.99."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1599.258064516129 989.8767915427474\n",
      "0.9999956206542673\n"
     ]
    }
   ],
   "source": [
    "myguess = 6000\n",
    "print(mu,sigma)\n",
    "print(normdist(myguess,mu,sigma))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5820.974479887303\n"
     ]
    }
   ],
   "source": [
    "# If we want to get fancy we can use Newton's method to get really close to the root\n",
    "\n",
    "from scipy.optimize import newton\n",
    "\n",
    "def f(x):\n",
    "    mu = 1599.258064516129\n",
    "    sigma = 989.8767915427474\n",
    "    quantile = 0.99999\n",
    "    argument = (x - mu)/(math.sqrt(2.0)*sigma)    \n",
    "    normdist = (1.0 + math.erf(argument))/2.0\n",
    "    return normdist - quantile\n",
    "\n",
    "print(newton(f, myguess))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So a peak discharge of 4000 or so is expected to be observed with 1% chance, notice we took the value from the fitted distribution, not the empirical set.  As an observation, the Normal model is not a very good data model for these observations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Log-Normal\n",
    "\n",
    "Another data model we can try is log-normal, where we stipulate that the logarithms of the observations are normal.  The scripts are practically the same, but there is an inverse transformation required to recover original value scale.  Again we will use Beargrass creek.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def loggit(x):  # A prototype function to log transform x\n",
    "    return(math.log(x))\n",
    "\n",
    "logsample = beargrass['Peak'].apply(loggit).tolist() # put the peaks into a list\n",
    "sample_mean = numpy.array(logsample).mean()\n",
    "sample_variance = numpy.array(logsample).std()**2\n",
    "logsample.sort() # sort the sample in place!\n",
    "weibull_pp = [] # built a relative frequency approximation to probability, assume each pick is equally likely\n",
    "for i in range(0,len(sample),1):\n",
    "    weibull_pp.append((i+1)/(len(sample)+1))\n",
    "################\n",
    "mu = sample_mean # Fitted Model in Log Space\n",
    "sigma = math.sqrt(sample_variance)\n",
    "x = []; ycdf = []\n",
    "xlow = 1; xhigh = 1.05*max(logsample) ; howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue) \n",
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (7,9)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(weibull_pp, logsample ,color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='red') \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "mytitle = \"Log Normal Data Model log sample mean = : \" + str(sample_mean)+ \" log sample variance  =:\" + str(sample_variance)\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot doesn't look too bad, but we are in log-space, which is hard to interpret, so we will transform back to arithmetic space "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def antiloggit(x):  # A prototype function to log transform x\n",
    "    return(math.exp(x))\n",
    "\n",
    "sample = beargrass['Peak'].tolist() # pull original list\n",
    "sample.sort() # sort in place\n",
    "################\n",
    "mu = sample_mean # Fitted Model in Log Space\n",
    "sigma = math.sqrt(sample_variance)\n",
    "x = []; ycdf = []\n",
    "xlow = 1; xhigh = 1.05*max(logsample) ; howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(antiloggit(xlow + i*xstep))\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue) \n",
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (7,9)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample ,color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='red') \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "mytitle = \"Log Normal Data Model sample log mean = : \" + str((sample_mean))+ \" sample log variance  =:\" + str((sample_variance))\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visually a better data model, now lets determine the 1% chance value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7.23730905616488 0.4984855728993489\n",
      "0.9900772507418303\n"
     ]
    }
   ],
   "source": [
    "myguess = 4440\n",
    "print(mu,sigma)\n",
    "print(normdist(loggit(myguess),mu,sigma)) # mu, sigma already in log space - convert myguess"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4433.567789173268\n"
     ]
    }
   ],
   "source": [
    "# If we want to get fancy we can use Newton's method to get really close to the root\n",
    "\n",
    "from scipy.optimize import newton\n",
    "\n",
    "def f(x):\n",
    "    mu = 7.23730905616488\n",
    "    sigma = 0.4984855728993489\n",
    "    quantile = 0.99\n",
    "    argument = (loggit(x) - mu)/(math.sqrt(2.0)*sigma)    \n",
    "    normdist = (1.0 + math.erf(argument))/2.0\n",
    "    return normdist - quantile\n",
    "\n",
    "print(newton(f, myguess))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have a decent method, we should put stuff into functions to keep code concise, lets examine a couple more data models\n",
    "\n",
    "### Gumbell (Double Exponential) Distribution\n",
    "\n",
    "The Gumbell is also called the Extreme-Value Type I distribution, the density and quantile function are:\n",
    "\n",
    "$$ \\text{pdf(x)} = \\frac{1}{\\beta} \\cdot exp [-\\frac{(x-\\alpha)}{\\beta} - exp (-\\frac{(x-\\alpha)}{\\beta}) ]$$\n",
    "\n",
    "$$ F(X) =  \\int_{-\\infty}^X{\\frac{1}{\\beta} \\cdot exp [-\\frac{(x-\\alpha)}{\\beta} - exp (-\\frac{(x-\\alpha)}{\\beta}) ] dx} = exp [- exp (-\\frac{(X-\\alpha)}{\\beta})] $$\n",
    "\n",
    "The distribution has two parameters, $\\alpha$ and $\\beta$, which in some sense play the same role as mean and variance. Lets modify our scripts further to see how this data model performs on the Bearcreek data.\n",
    "\n",
    "Of course we need a way to estimate the parameters, a good approximation can be obtained using:\n",
    "\n",
    "$$ \\alpha = \\mu \\cdot \\frac{\\sqrt{6}}{\\pi} $$\n",
    "\n",
    "and\n",
    "\n",
    "$$ \\beta = 0.45 \\cdot \\sigma $$\n",
    "\n",
    "where $\\mu$ and $\\sigma^2$ are the sample mean and variance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ev1dist(x,alpha,beta):\n",
    "    argument = (x - alpha)/beta\n",
    "    constant = 1.0/beta\n",
    "    ev1dist = math.exp(-1.0*math.exp(-1.0*argument))\n",
    "    return ev1dist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now literally substitute into our prior code!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample = beargrass['Peak'].tolist() # put the peaks into a list\n",
    "sample_mean = numpy.array(sample).mean()\n",
    "sample_variance = numpy.array(sample).std()**2\n",
    "alpha_mom = sample_mean*math.sqrt(6)/math.pi\n",
    "beta_mom = math.sqrt(sample_variance)*0.45\n",
    "sample.sort() # sort the sample in place!\n",
    "weibull_pp = [] # built a relative frequency approximation to probability, assume each pick is equally likely\n",
    "for i in range(0,len(sample),1):\n",
    "    weibull_pp.append((i+1)/(len(sample)+1))\n",
    "################\n",
    "mu = sample_mean # Fitted Model\n",
    "sigma = math.sqrt(sample_variance)\n",
    "x = []; ycdf = []\n",
    "xlow = 0; xhigh = 1.2*max(sample) ; howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = ev1dist(xlow + i*xstep,alpha_mom,beta_mom)\n",
    "    ycdf.append(yvalue) \n",
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (7,8)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample ,color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='red') \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "mytitle = \"Extreme Value Type 1 Distribution Data Model sample mean = : \" + str(sample_mean)+ \" sample variance =:\" + str(sample_variance)\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again a so-so visual fit.\n",
    "To find the 1% chance value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1246.9363972503857 445.4445561942363\n",
      "0.990087892543188\n"
     ]
    }
   ],
   "source": [
    "myguess = 3300\n",
    "print(alpha_mom,beta_mom)\n",
    "print(ev1dist(myguess,alpha_mom,beta_mom)) # "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3296.0478279991366\n"
     ]
    }
   ],
   "source": [
    "# If we want to get fancy we can use Newton's method to get really close to the root\n",
    "\n",
    "from scipy.optimize import newton\n",
    "\n",
    "def f(x):\n",
    "    alpha = 1246.9363972503857\n",
    "    beta = 445.4445561942363\n",
    "    quantile = 0.99\n",
    "    argument = (x - alpha)/beta\n",
    "    constant = 1.0/beta\n",
    "    ev1dist = math.exp(-1.0*math.exp(-1.0*argument))\n",
    "    return ev1dist - quantile\n",
    "\n",
    "print(newton(f, myguess))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gamma Distribution (as Pearson Type 3)\n",
    "\n",
    "One last data model to consider is one that is specifically stipulated for use by federal agencies for probability estimation of extreme hydrologic events.  The data model ia called the Log-Pearson Type III distribution, its actually a specific case of a Gamma distrubution.  \n",
    "\n",
    "This example we will dispense with tyring to build it in python primative, and just use a package - the density function is not all that hard, but the quantile function is elaborate.  \n",
    "\n",
    "Learn more at http://54.243.252.9/engr-1330-psuedo-course/CECE-1330-PsuedoCourse/3-Readings/NumericalRecipesinF77.pdf (in particular around Page 276)\n",
    "\n",
    "As usual, lets let Google do some work for us, using the search term \"gamma quantile function; scipy\" we get to this nice blog entry https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gamma.html which is a good start. \n",
    "\n",
    "A Pearson Type III data model has the following density function:\n",
    "\n",
    "$$ f(x|\\tau,\\alpha,\\beta) = \\frac{(\\frac{x-\\tau}{\\beta})^{\\alpha -1}\\cdot exp( - \\frac{x-\\tau}{\\beta})}{|\\beta| \\Gamma(\\alpha)}$$\n",
    "\n",
    "If we make some substitutions:\n",
    "$ \\lambda = \\frac{1}{\\beta} ; \\hat{x} = x -\\tau $ then the density function is\n",
    "\n",
    "$$ f(\\hat{x}) = \\frac{ 1}{\\Gamma(\\alpha)} (\\lambda \\hat{x})^{\\alpha -1}\\cdot exp( - \\lambda \\hat{x} )$$\n",
    "\n",
    "which is now a one parameter Gamma density function just like the example in the link.\n",
    "\n",
    "Reading a little from http://atomickitty.ddns.net/documents/university-courses/ce-5361-swhydrology/1-Lessons.src/Lesson22/AdditionalReading/Bulletin17C-tm4b5-draft-ACWI-17Jan2018.pdf we can relate the transformations to descriptive statistics (shown below without explaination) as:\n",
    "\n",
    "$\\mu = \\text{sample mean}$,\n",
    "\n",
    "$\\sigma = \\text{sample standard deviation}$, \n",
    "\n",
    "$\\gamma = \\text{sample skew coefficient} = (\\frac{n}{\\sigma^3(n-1)(n-2)})\\sum_{i=1}^n(x_i - \\mu)^3 $\n",
    "\n",
    "$\\alpha = \\frac{4}{\\gamma^2}$  \n",
    "\n",
    "$\\beta = sign(\\gamma)\\sqrt{\\frac{\\sigma^2}{\\alpha}}$\n",
    "\n",
    "$\\tau = \\mu - \\alpha \\cdot \\beta$\n",
    "\n",
    "So we have a bit of work to do.  The name of the functions in `scipy` we are interested in are `gamma.pdf(x,a)` and `gamma.cdf(x,a)`  So lets build a tool to generate a Log-Pearson Type III data model, then apply it to Beargrass Creek.  We will use a lot of glue here.\n",
    "\n",
    "First load in dependencies, and define support functions we will need "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats # import scipy stats package\n",
    "import math        # import math package\n",
    "import numpy       # import numpy package\n",
    "# log and antilog\n",
    "def loggit(x):  # A prototype function to log transform x\n",
    "    return(math.log(x))\n",
    "def antiloggit(x):  # A prototype function to log transform x\n",
    "    return(math.exp(x))\n",
    "def weibull_pp(sample): # plotting position function\n",
    "# returns a list of plotting positions; sample must be a numeric list\n",
    "    weibull_pp = [] # null list to return after fill\n",
    "    sample.sort() # sort the sample list in place\n",
    "    for i in range(0,len(sample),1):\n",
    "        weibull_pp.append((i+1)/(len(sample)+1))\n",
    "    return weibull_pp\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then the gamma distribution from scipy, modified for our type of inputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gammacdf(x,tau,alpha,beta): # Gamma Cumulative Density function - with three parameter to one parameter convert\n",
    "    xhat = x-tau\n",
    "    lamda = 1.0/beta\n",
    "    gammacdf = scipy.stats.gamma.cdf(lamda*xhat, alpha)\n",
    "    return gammacdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then load in the data from the data frame, log transform and generate descriptive statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sample = beargrass['Peak'].tolist() # put the peaks into a list\n",
    "sample = beargrass['Peak'].apply(loggit).tolist() # put the log peaks into a list\n",
    "sample_mean  = numpy.array(sample).mean()\n",
    "sample_stdev = numpy.array(sample).std()\n",
    "sample_skew  = 3.0 # scipy.stats.skew(sample)\n",
    "sample_alpha = 4.0/(sample_skew**2)\n",
    "sample_beta  = numpy.sign(sample_skew)*math.sqrt(sample_stdev**2/sample_alpha)\n",
    "sample_tau   = sample_mean - sample_alpha*sample_beta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now generate plotting positions for the sample observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "plotting = weibull_pp(sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now generate values for the data model (for plotting our red line \"fit\"), set limits to be a little beyond the sample range."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = []; ycdf = []\n",
    "xlow = (0.9*min(sample)); xhigh = (1.1*max(sample)) ; howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = gammacdf(xlow + i*xstep,sample_tau,sample_alpha,sample_beta)\n",
    "    ycdf.append(yvalue) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now reverse transform back to native scale, and plot the sample values vs plotting position in blue, and the data model in red"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# reverse transform the peaks, and the data model peaks\n",
    "for i in range(len(sample)):\n",
    "    sample[i] = antiloggit(sample[i])\n",
    "for i in range(len(x)):\n",
    "    x[i] = antiloggit(x[i])\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (7,8)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(plotting, sample ,color ='blue') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='red') \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "mytitle = \"Log Pearson Type III Distribution Data Model\\n \"\n",
    "mytitle += \"Mean = \" + str(antiloggit(sample_mean)) + \"\\n\"\n",
    "mytitle += \"SD = \" + str(antiloggit(sample_stdev)) + \"\\n\"\n",
    "mytitle += \"Skew = \" + str(antiloggit(sample_skew)) + \"\\n\"\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And as before lets find the value that retruns the 99% quantile - we will just use the newton method above.\n",
    "First recover the required model parameters. Then we will paste these into the $f(x)$ function for the Newton's method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.714701566527543\n",
      "25.609091660104536\n",
      "0.0985043719284747\n"
     ]
    }
   ],
   "source": [
    "print(sample_tau)\n",
    "print(sample_alpha)\n",
    "print(sample_beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5856.10913158364\n"
     ]
    }
   ],
   "source": [
    "# If we want to get fancy we can use Newton's method to get really close to the root\n",
    "\n",
    "from scipy.optimize import newton\n",
    "\n",
    "def f(x):\n",
    "    sample_tau = 5.976005311346212\n",
    "    sample_alpha = 6.402272915026134\n",
    "    sample_beta = 0.1970087438569494\n",
    "    quantile = 0.9900\n",
    "    argument = loggit(x)\n",
    "    gammavalue = gammacdf(argument,sample_tau,sample_alpha,sample_beta)\n",
    "    return gammavalue - quantile\n",
    "\n",
    "myguess =  5000\n",
    "print(newton(f, myguess))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Trust, but verify!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9943"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(gammacdf(loggit(5856.109),sample_tau,sample_alpha,sample_beta),4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets summarize our efforts regarding Beargrass Creek annual peaks and probabilities anticipated.\n",
    "\n",
    "|Data Model|99% Peak Flow|Remarks|\n",
    "|:---|:---|:---|\n",
    "|Normal|3902|so-so visual fit|           \n",
    "|Log-Normal|4433|better visual fit|            \n",
    "|Gumbell|3296|better visual fit|            \n",
    "|Log-Pearson III|5856|best (of the set) visual fit|\n",
    "\n",
    "At this point, now we have to choose our model and then can investigate different questions.  So using LP3 as our favorite, lets now determine anticipated flow values for different probabilities (from the data model) - easy enought to just change the quantile value and rerun the newtons optimizer, for example:\n",
    "\n",
    "|Exceedence Probability|Flow Value|Remarks|\n",
    "|:---|:---|:---|\n",
    "|25% |968| First Quartile Divider|           \n",
    "|50% |1302| Median, and Second Quartile Divider|            \n",
    "|75% |1860| 3rd Quartile Divider|            \n",
    "|90% |2706| 10% chance of greater value|\n",
    "|99% |5856| 1% chance of greater value (in flood statistics, this is the 1 in 100-yr chance event)|\n",
    "|99.8%|9420| 0.002% chance of greater value (in flood statistics, this is the 1 in 500-yr chance event)|\n",
    "|99.9%|11455| 0.001% chance of greater value (in flood statistics, this is the 1 in 1000-yr chance event)|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1302.814639184079\n"
     ]
    }
   ],
   "source": [
    "# If we want to get fancy we can use Newton's method to get really close to the root\n",
    "\n",
    "from scipy.optimize import newton\n",
    "\n",
    "def f(x):\n",
    "    sample_tau = 5.976005311346212\n",
    "    sample_alpha = 6.402272915026134\n",
    "    sample_beta = 0.1970087438569494\n",
    "    quantile = 0.50\n",
    "    argument = loggit(x)\n",
    "    gammavalue = gammacdf(argument,sample_tau,sample_alpha,sample_beta)\n",
    "    return gammavalue - quantile\n",
    "\n",
    "myguess =  1000\n",
    "print(newton(f, myguess))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References:\n",
    "\n",
    "0. Jamie Chan (2014) Learn Python in One Day and Learn It Well. LCF Publishing. Kindle Edition. http://www.learncodingfast.com/python\n",
    "\n",
    "1. Grus, Joel. Data Science from Scratch: First Principles with Python. O'Reilly Media. Kindle Edition. (http://safaribooksonline.com)\n",
    "\n",
    "2. Christian, B, and Griffiths Tom (2016) Algorithms to live by: The computer science of human decisions. Henry Holt and Company, ISBN 9781627790369 (hardcover)|ISBN 9781627790376 (electronic book)\n",
    "\n",
    "3. https://www.amazon.com/Distributional-Statistics-Environment-Statistical-Computing/dp/1463508417\n",
    "    \n",
    "4. England, J.F. Jr., Cohn, T.A., Faber, B.A., Stedinger, J.R., Thomas Jr., W.O., Veilleux, A.G., Kiang, J.E., and Mason, R.R.Jr., 2018, Guidelines for Determining Flood Flow Frequency—Bulletin 17C: U.S. Geological Survey Techniques andMethods, book 4, chap. B5, 146 p., https://doi.org/10.3133/tm4B5\n",
    "\n",
    "5. https://www.astroml.org/book_figures/chapter3/fig_gamma_distribution.html\n",
    "\n",
    "6. https://www.inferentialthinking.com/chapters/10/Sampling_and_Empirical_Distributions.html\n",
    "\n",
    "7. https://www.inferentialthinking.com/chapters/15/Prediction.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
