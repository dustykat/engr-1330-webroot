{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Download this page as a jupyter notebook at [Lesson 13](http://54.243.252.9/engr-1330-webroot/1-Lessons/Lesson13/ENGR-1330-Lesson13.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ENGR 1330 Computational Thinking with Data Science \n",
    "Last GitHub Commit Date: 31 January 2021\n",
    "\n",
    "## Lesson 13 Data Science Inferences from Visual Display of Data  \n",
    "\n",
    "This lesson further explores using graphics to learn about and explain data behavior.  \n",
    "\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "atomickitty\n",
      "sensei\n",
      "/home/sensei/engr-1330-webroot/1-Lessons/Lesson13\n",
      "/opt/jupyterhub/bin/python3\n"
     ]
    }
   ],
   "source": [
    "# Script block to identify host, user, and kernel\n",
    "import sys\n",
    "! hostname; ! whoami; ! pwd; \n",
    "print(sys.executable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!-- Script Block to set tables to left alignment -->\n",
       "<style>\n",
       "  table {margin-left: 0 !important;}\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<!-- Script Block to set tables to left alignment -->\n",
    "<style>\n",
    "  table {margin-left: 0 !important;}\n",
    "</style>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Model Conceptual Example\n",
    "\n",
    "Recall our line chart tool, and the time-speed data\n",
    "\n",
    "Consider the experimental data below\n",
    "\n",
    "|Elapsed Time (s)|Speed (m/s)|\n",
    "|---:|---:|\n",
    "|0 |0|\n",
    "|1.0 |3|\n",
    "|2.0 |7|\n",
    "|3.0 |12|\n",
    "|4.0 |20|\n",
    "|5.0 |30|\n",
    "|6.0 | 45.6| \n",
    "\n",
    "Show the relationship between time and speed.  What can we learn about the relationship? Is it linear, quadratic, cubic, hyperbolic?  How do we explore these questions?\n",
    "\n",
    "---\n",
    "\n",
    "First lets build a plotting function that plots observations and data model values on same chart."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "def make2plot(listx1,listy1,listx2,listy2,strlablx,strlably,strtitle):\n",
    "    mydata = plt.figure(figsize = (10,5)) # build a square drawing canvass from figure class\n",
    "    plt.plot(listx1,listy1, c='red', marker='v',linewidth=0) # basic data plot\n",
    "    plt.plot(listx2,listy2, c='blue',linewidth=1) # basic model plot\n",
    "    plt.xlabel(strlablx)\n",
    "    plt.ylabel(strlably)\n",
    "    plt.legend(['Observations','Model'])# modify for argument insertion\n",
    "    plt.title(strtitle)\n",
    "    plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test our function, we will plot the data as red markers and the model as blue lines; in this instance we will just reuse data so the plot will look perfect, but its only to test the plotting function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create two lists; time  and speed - these represent observations\n",
    "time = [0,1.0,2.0,3.0,4.0,5.0,6.0]\n",
    "speed = [0,3,7,12,20,30,45.6]\n",
    "#make2plot(time,speed,time,speed,'time (sec.)','speed (m/s)','Plot of model and observations')\n",
    "# lets plot, set second list set to 0,0 \n",
    "make2plot(time,speed,[0,0],[0,0],'time (sec.)','speed (m/s)','Plot of model and observations')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Now we can consider a data model.  For this example, lets simply stipulate that the relationship may be up to a 3-rd order polynomial (an unfed parrot if you will).\n",
    "\n",
    "$y = \\beta_0 + \\beta_1 \\cdot x + \\beta_2 \\cdot x^2 + \\beta_2 \\cdot x^3$\n",
    "\n",
    "where $y$ in this example is speed in meters/second, and $x$ is time in seconds.  As a data model all we are doing is explaining the structure of the relationship, if we knew that it is a physical process we might adjust our model to be constant acceleration kinematics.  However for the example, the polynomial will suffice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a data model - lets use a polynomial model\n",
    "def polynomial(b0,b1,b2,b3,x):\n",
    "    # return y = b0 + b1*x + b2*x**2 + b3*x**3\n",
    "    polynomial=b0+b1*x+b2*x**2+b3*x**3  \n",
    "    return(polynomial)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have a data model, that returns speed given time according to a polynomial equation.\n",
    "\n",
    "Lets do some trial-and-error guess at values for $\\beta_0,\\beta_2,\\beta_2,\\beta_3$ \n",
    "\n",
    "We will start with \n",
    "\n",
    "> - b0 = 0\n",
    "> - b1 = 1\n",
    "> - b2 = 0\n",
    "> - b3 = 0\n",
    "\n",
    "And adjust from there\n",
    "\n",
    "Then lets end with\n",
    "\n",
    "> - b0 = 0\n",
    "> - b1 = 1.3\n",
    "> - b2 = 0.75\n",
    "> - b3 = 0.05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter b0 value 0\n",
      "Enter b1 value 6\n",
      "Enter b2 value 0.12\n",
      "Enter b3 value  0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# prompt for inputs of b0,b1,b2,b3\n",
    "# do some trial and error 0,1.3,0.75,0.05\n",
    "intercept=float(input('Enter b0 value'))\n",
    "linear=float(input('Enter b1 value'))\n",
    "quadratic=float(input('Enter b2 value'))\n",
    "cubic=float(input('Enter b3 value '))\n",
    "# build a data model\n",
    "modelSpeed = [] # empty list\n",
    "for i in range(len(time)):\n",
    "    modelSpeed.append(polynomial(intercept,linear,quadratic,cubic,time[i]))\n",
    "# Plotting results\n",
    "make2plot(time,speed,time,modelSpeed,'time (sec.)','speed (m/s)','Plot of model and observations')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last plot looks kind of decent, how could we \"measure\" the model's prediction value?\n",
    "\n",
    "We can compute the difference between the observations and the model, add them all up and see how close to perfect we get."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0,\n",
       " -3.12,\n",
       " -5.48,\n",
       " -7.079999999999998,\n",
       " -5.920000000000002,\n",
       " -3.0,\n",
       " 5.280000000000001]"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Prediction Error\n",
    "pe = [] # empty list to store prediction errors\n",
    "for i in range(len(time)):\n",
    "    pe.append(speed[i]-modelSpeed[i])\n",
    "sum(pe)\n",
    "pe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "161.81600000000003"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Squared Prediction Error\n",
    "sqpe = [] # empty list to store prediction errors\n",
    "for i in range(len(time)):\n",
    "    sqpe.append(pow(speed[i]-modelSpeed[i],2))\n",
    "sum(sqpe)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It becomes apparent quickly that it is a hastle to keep going back, so lets wrap things in a while loop so we can keep track of our trials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter b0 value, current value = 0 0\n",
      "Enter b1 value, current value = 0 0\n",
      "Enter b2 value, current value = 0 0\n",
      "Enter b3 value, current value = 0 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current squared error =  3581.36\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "do you want to stop? y or n n\n",
      "Enter b0 value, current value = 0.0 20\n",
      "Enter b1 value, current value = 0.0 0\n",
      "Enter b2 value, current value = 0.0 0\n",
      "Enter b3 value, current value = 0.0 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current squared error =  1677.3600000000001\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "do you want to stop? y or n n\n",
      "Enter b0 value, current value = 20.0 0\n",
      "Enter b1 value, current value = 0.0 5\n",
      "Enter b2 value, current value = 0.0 0\n",
      "Enter b3 value, current value = 0.0 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current squared error =  290.36\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "do you want to stop? y or n n\n",
      "Enter b0 value, current value = 0.0 0\n",
      "Enter b1 value, current value = 5.0 1\n",
      "Enter b2 value, current value = 0.0 1.3\n",
      "Enter b3 value, current value = 0.0 0.05\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current squared error =  594.2475000000003\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "do you want to stop? y or n n\n",
      "Enter b0 value, current value = 0.0 0\n",
      "Enter b1 value, current value = 1.0 1.3\n",
      "Enter b2 value, current value = 1.3 0.75\n",
      "Enter b3 value, current value = 0.05 0.05\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current squared error =  4.219999999999999\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "do you want to stop? y or n y\n"
     ]
    }
   ],
   "source": [
    "quit=True\n",
    "# put some default values\n",
    "intercept=0\n",
    "linear=0\n",
    "quadratic=0\n",
    "cubic=0\n",
    "# here is the control loop\n",
    "while quit:\n",
    "# prompt for inputs of b0,b1,b2,b3\n",
    "# do some trial and error 0,1.3,0.75,0.05\n",
    "    intercept=float(input('Enter b0 value, current value = '+str(intercept)))\n",
    "    linear=float(input('Enter b1 value, current value = '+str(linear)))\n",
    "    quadratic=float(input('Enter b2 value, current value = '+str(quadratic)))\n",
    "    cubic=float(input('Enter b3 value, current value = '+str(cubic)))\n",
    "# build a data model\n",
    "    modelSpeed = [] # empty list\n",
    "    for i in range(len(time)):\n",
    "        modelSpeed.append(polynomial(intercept,linear,quadratic,cubic,time[i]))\n",
    "# Plotting results\n",
    "    make2plot(time,speed,time,modelSpeed,'time (sec.)','speed (m/s)','Plot of model and observations')\n",
    "    # Squared Prediction Error\n",
    "    sqpe = [] # empty list to store prediction errors\n",
    "    for i in range(len(time)):\n",
    "        sqpe.append(pow(speed[i]-modelSpeed[i],2))\n",
    "    print('Current squared error = ',sum(sqpe))\n",
    "    stop = input('do you want to stop? y or n') # here is how we stop\n",
    "    if stop == 'y':\n",
    "        quit=False\n",
    "    else:\n",
    "        continue # keep going!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets predict a value within our observations, say the speed at 4.5 seconds.  Looking at the graph it looks like about 25 m/sec.  But we have the data model, so just use it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter an elapsed time 4.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The estimated speed is  25.59375\n"
     ]
    }
   ],
   "source": [
    "mytime=float(input('enter an elapsed time'))\n",
    "myspeed = polynomial(intercept,linear,quadratic,cubic,mytime)\n",
    "print('The estimated speed is ',myspeed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets predict a value beyond the observations, say the speed at 7 seconds.  Looking at the graph the best we can say is if the curvature is extended the value is somewhere near 60 (surely bigger than 45).   But beyond that we know nothing.  The data model allows extrapolation simply because we have declared it the relationship that explains the observatons.  If the model were based on some physical, chemical, or biological process we might actually be comfortable making extrapolations; here we will just stipulate that 1 more second is close to the observations, so we will extrapolate; again using our data model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter an elapsed time 7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The estimated speed is  63.0\n"
     ]
    }
   ],
   "source": [
    "mytime=float(input('enter an elapsed time'))\n",
    "myspeed = polynomial(intercept,linear,quadratic,cubic,mytime)\n",
    "print('The estimated speed is ',myspeed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Data Models (Interpolation using Lagrangian Polynomials)\n",
    "\n",
    "The Starship rocket in the figure below sends a lot of telemetry data to both on-board and off-board (ground-based) control computers.  \n",
    "\n",
    "![https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/SpaceX_Starship_SN8_launch_as_viewed_from_South_Padre_Island.jpg/800px-SpaceX_Starship_SN8_launch_as_viewed_from_South_Padre_Island.jpg](800px-SpaceX_Starship_SN8_launch_as_viewed_from_South_Padre_Island.png)\n",
    "\n",
    "Suppose telemetry is received every 1/10 of a second, providing the altitude (position) of the craft, something like the figure below.\n",
    "\n",
    "![](altitude-time.png)\n",
    "\n",
    "How can one estimate the altitude at intermediate times (between the 1/10 of a second \"true\" values)?\n",
    "\n",
    "The problem is a type of interpolation problem similar to calculating water density from tables for intermediate values by assuming a straight line passed between the two values from the table. However it may not be appropriate to assume that the altitudes are linear with time.  The special challenge comes when we want to estimate intermediate values when there is a maximum or minimum in the tabular structure, and we will have to process many records for different cases.\n",
    "\n",
    "The classical approach to such a problem is to fit a polynomial to the tabular results and interrogate the resulting polynomial to obtain estimates of the intermediate values.  This prediction engine (the polynomial) is required to return the exact value at a observation location (in our case a 1/10 second interval).  This requirement is quite distinct from other types of prediction engines we will study."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Lagrangian Interpolation\n",
    "\n",
    "Polynomial interpolation is the method of determining a polynomial that fits a set of given points. There are several approaches to polynomial interpolation, of which one of the most well known is the Lagrangian method. The Lagrangian polynomial [https://en.wikipedia.org/wiki/Lagrange_polynomial](https://en.wikipedia.org/wiki/Lagrange_polynomial) is the polynomial of order $n-1$, where $n$ is he number of tabular data pairs we wish to interpolate. \n",
    "\n",
    "Suppose we have a table of data (or telemetry sent back from our rocket), of $x-$ and $f(x)$-values:\n",
    "\n",
    "|$$x~$$  | $$~f(x)$$   |\n",
    "|:---  | :--- |\n",
    "|$$x_1$$ |$$f_1$$|\n",
    "|$$x_2$$   |$$f_2$$|\n",
    "|$$x_3$$   |$$f_3$$|\n",
    "|$$x_4$$ |$$f_4$$|\n",
    "\n",
    "The highest order polynomial that can be passed through these four data pairs is a cubic.  A Lagrangian form for such a cubic is\n",
    "\n",
    "$$ P_3(x) = f(x_1)\\frac{(x-x_2)(x-x_3)(x-x_4)}{(x_1-x_2)(x_1-x_3)(x_1-x_4)} + f(x_2)\\frac{(x-x_1)(x-x_3)(x-x_4)}{(x_2-x_1)(x_2-x_3)(x_2-x_4)} + f(x_3)\\frac{(x-x_1)(x-x_2)(x-x_4)}{(x_3-x_1)(x_3-x_2)(x_3-x_4)} +f(x_4)\\frac{(x-x_1)(x-x_2)(x-x_3)}{(x_4-x_1)(x_4-x_2)(x_4-x_3)} $$\n",
    "\n",
    "Notice that it is constructed of four terms, each of which is a cubic in $x$; hence the sum is a cubic also.  The pattern of each term is to form the numerator as a product of differences of the form $(x-x_i)$, omitting one $x_i$ in each term, the ommitted term is used in the denominator as a replacement for $x$ in each position in the numerator.  In each term, the difference factor is multiplied by the value $f_i$ corresponding to the $x_i$ ommitted in the numerator. The Lagragian polynomial for other degrees of interpolating polynomials employs this same pattern of forming a sum of polynomials of the desired degree. \n",
    "\n",
    "Of importance is that the polynomial is intended to be used for interpolation, that is the value we seek $P(x^*)$ assumes we will supply $x^*$ in the range $[x_1 , x_4]$.  Going outside this range is called extrapolation, and interpolator-type prediction engines are the wromg tool!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1\n",
    "\n",
    "Consider the three observations below, estimate (predict) the value for $f(2.3)$.\n",
    "\n",
    "|$$x~$$  | $$~f(x)$$   |\n",
    "|:---  | :--- |\n",
    "|1.1  |10.6|\n",
    "|1.7  |15.2|\n",
    "|3.0  |20.3|\n",
    "\n",
    "The Lagrangian form of the highest order of polynomial that can pass through the 3 data pairs is the quadratic:\n",
    "\n",
    "$$ P_2(x) = f(x_1)\\frac{(x-x_2)(x-x_3)}{(x_1-x_2)(x_1-x_3)} + f(x_2)\\frac{(x-x_1)(x-x_3)}{(x_2-x_1)(x_2-x_3)} + f(x_3)\\frac{(x-x_1)(x-x_2)}{(x_3-x_1)(x_3-x_2)} $$\n",
    "\n",
    "Once the denominators are completed, it is relatively straightforward to compute the estimate (prediction), in this case\n",
    "\n",
    "$$ P_2(x) = (10.6)\\frac{(x-1.7)(x-3.0)}{(1.1-1.7)(1.1-3.0)} + (15.2)\\frac{(x-1.1)(x-3.0)}{(1.7-1.1)(1.7-3.0)} + (20.3)\\frac{(x-1.1)(x-1.7)}{(3.0-1.1)(3.0-1.7)} $$\n",
    "\n",
    "At $x=2.3$ the result is $P_2(2.3)=18.38$.  \n",
    "\n",
    "Naturally, we want to use Computational Thinking principles, to pattern match and generalize the arithmetic as below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lagint(xlist,ylist,xpred):\n",
    "    # lagrangian interpolation of order len(xlist)-1 \n",
    "    # \n",
    "    lagint = 0.0 # ypred is an accumulator, and will be output\n",
    "    norder = len(xlist)\n",
    "    for i in range(norder):\n",
    "        term = ylist[i] # build up terms of polynomial\n",
    "        for j in range(norder):\n",
    "            if (i != j):\n",
    "                term = term * (xpred-xlist[j])/(xlist[i]-xlist[j])\n",
    "#            pass # may not need this expression\n",
    "        lagint = lagint + term\n",
    "#    print(i,j) #debugging expression\n",
    "    return(lagint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18.38\n"
     ]
    }
   ],
   "source": [
    "xtable = [1.1,1.7,3.0]\n",
    "ytable = [10.6,15.2,20.3]\n",
    "\n",
    "xwant = 2.3\n",
    "\n",
    "print(round(lagint(xtable,ytable,xwant),2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2\n",
    "\n",
    "This example is copied from [https://rstudio-pubs-static.s3.amazonaws.com/286315_f00cf07beb3945d2a0260d6eaecb5d36.html](https://rstudio-pubs-static.s3.amazonaws.com/286315_f00cf07beb3945d2a0260d6eaecb5d36.html)\n",
    "\n",
    "In the original source the author plots the resulting function, we can do the same here.  First the observation set:\n",
    "\n",
    "|$$x~$$  | $$~f(x)$$   |\n",
    "|:---  | :--- |\n",
    "|0 |7|\n",
    "|2 |11|\n",
    "|3 |28|\n",
    "|4 |63|\n",
    "\n",
    "Next we will plot the interpolating polynomial from $x=0$ to $x=4$ in steps of 0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.067\n"
     ]
    }
   ],
   "source": [
    "xtable = [0.1,0.3,0.5,0.7,0.9,1.1,1.3]\n",
    "ytable = [0.003,0.067,0.148,0.248,0.370,0.518,0.697]\n",
    "xwant = 0.3\n",
    "print(lagint(xtable,ytable,xwant))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Observations\n",
    "xtable = [0,2,3,4]\n",
    "ytable = [7,11,28,63]\n",
    "#\n",
    "xpred = [] # empty list to store results for plotting\n",
    "ypred = [] # empty list to store results for plotting\n",
    "#\n",
    "step_size = 0.10  # step size\n",
    "how_many = int((xtable[len(xtable)-1])/step_size)\n",
    "# build the predictions\n",
    "for i in range(how_many+1): \n",
    "    xpred.append(float(i)*step_size)\n",
    "    ypred.append(lagint(xtable,ytable,float(i)*step_size))\n",
    "#print(lagint(xtable,ytable,xwant))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot # the python plotting library\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (6,6)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(xtable, ytable ,color ='red') # The observations as points\n",
    "matplotlib.pyplot.plot(xpred, ypred, color ='blue') # the polynomial\n",
    "matplotlib.pyplot.xlabel(\"Input Value\") \n",
    "matplotlib.pyplot.ylabel(\"Function Value\") \n",
    "mytitle = \"Interpolating Polynomial Fit to Observations\\n \"\n",
    "mytitle += \"Blue Markers are Observations \" + \"\\n\"\n",
    "mytitle += \"Red Curve is Fitted Polynomial \"+ \"\\n\"\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Models of Distributions\n",
    "\n",
    "Another kind of data science question is the prediction of things with a probabilistic component.\n",
    "\n",
    "Consider the data of annual peak streamflow somewhere.\n",
    "\n",
    "What's the smallest value observed? largest?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Automated Download \n",
    "# Get database -- use the Get Data From URL Script\n",
    "# Step 1: import needed modules to interact with the internet\n",
    "import requests\n",
    "# Step 2: make the connection to the remote file (actually its implementing \"bash curl -O http://fqdn/path ...\")\n",
    "remote_url = 'http://54.243.252.9/engr-1330-webroot/1-Lessons/Lesson13/beargrass.txt' # an Excel file\n",
    "response = requests.get(remote_url) # Gets the file contents puts into an object\n",
    "output = open('beargrass.txt', 'wb') # Prepare a destination, local\n",
    "output.write(response.content) # write contents of object to named local file\n",
    "output.close() # close the connection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Peak</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1945</td>\n",
       "      <td>1810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1946</td>\n",
       "      <td>791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1947</td>\n",
       "      <td>839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1948</td>\n",
       "      <td>1750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1949</td>\n",
       "      <td>898</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Peak\n",
       "0  1945  1810\n",
       "1  1946   791\n",
       "2  1947   839\n",
       "3  1948  1750\n",
       "4  1949   898"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas\n",
    "beargrass = pandas.read_csv('beargrass.txt')  #Reading a .csv file\n",
    "beargrass.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Year'>"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "beargrass.plot(x='Year',y='Peak')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      31.000000\n",
       "mean     1599.258065\n",
       "std      1006.239500\n",
       "min       707.000000\n",
       "25%       908.000000\n",
       "50%      1250.000000\n",
       "75%      1945.000000\n",
       "max      5200.000000\n",
       "Name: Peak, dtype: float64"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beargrass['Peak'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1012517.9311827957"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beargrass['Peak'].std()**2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- What is the chance of observing a value in future years of 0 or smaller ?  (High or Low)\n",
    "- What is the chance of observing a value in future years of 1600 or smaller ? (High or Low)\n",
    "- What is the chance of observing a value in future years of 3900 or larger ? (High or Low)\n",
    "\n",
    "Just like a polynomial model above, there are data models we can use to help answer such questions.  Here we will examine these data using a distribution model. Distribution models are expressed as a density function and/or a cumulative distribution function. \n",
    "\n",
    "A useful notation using the Normal density function as an example is:\n",
    "\n",
    "$ \\text{pdf(x)} = \\frac{1}{\\sigma \\sqrt{2\\pi}} \\times exp (-\\frac{(x-\\mu)^2}{2 \\sigma^2}) $\n",
    "\n",
    "In the function, $x$ is the random (independent) variable, $\\mu$ is called the **population** mean and $\\sigma^2$ is called the **population** variance.  \n",
    "\n",
    "Often we don't actually know the population values so we estimate them from the collection of observations, in this context these are called the **sample** mean and variance.   Computation of the **sample** values is done using methods described in the earlier lesson on descriptive statistics.\n",
    "\n",
    "The integral of the $ \\text{pdf(x)} $ from $-\\infty~to ~ X $, produces a result called the cumulative distribution function.  The value $ X $ is not a random variable, but the integral of the accumulated probability of the random variable $x$ being less than or equal to $X$.\n",
    "\n",
    "A useful notation using the Normal distribution as an example is:\n",
    "\n",
    "$$ F(X) =  \\int_{-\\infty}^X{\\frac{1}{\\sigma \\sqrt{2\\pi}} \\times exp (-\\frac{(x-\\mu)^2}{2 \\sigma^2}) dx}$$\n",
    "\n",
    "For the Normal distribution the integral is a special function called the Error function and can be written as:\n",
    "\n",
    "$$ F(X) =  \\frac{1}{2} \\cdot (1+erf(\\frac{(X-\\mu)}{\\sqrt{2} \\sigma}))$$\n",
    "\n",
    "**The equations change with different distribution models** "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we will build a normal distribution model, essentially the functions for the above equations, and then will plot them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def normdensity(x,mu,sigma):\n",
    "    weight = 1.0 /(sigma * math.sqrt(2.0*math.pi))\n",
    "    argument = ((x - mu)**2)/(2.0*sigma**2)\n",
    "    normdensity = weight*math.exp(-1.0*argument)\n",
    "    return normdensity\n",
    "\n",
    "def normdist(x,mu,sigma):\n",
    "    argument = (x - mu)/(math.sqrt(2.0)*sigma)    \n",
    "    normdist = (1.0 + math.erf(argument))/2.0\n",
    "    return normdist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x648 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy\n",
    "sample = beargrass['Peak'].tolist() # put the peaks into a list\n",
    "sample_mean = numpy.array(sample).mean()\n",
    "sample_variance = numpy.array(sample).std()**2\n",
    "#sample_mean = float(input('enter a value for mu'))\n",
    "#sample_variance = float(input('enter a value for dispersion'))\n",
    "################\n",
    "sample.sort() # sort the sample in place!\n",
    "weibull_pp = [] # built a relative frequency approximation to probability, assume each pick is equally likely\n",
    "for i in range(0,len(sample),1):\n",
    "    weibull_pp.append((i+1)/(len(sample)+1))\n",
    "################\n",
    "mu = sample_mean # Fitted Model\n",
    "sigma = math.sqrt(sample_variance)\n",
    "x = []; ycdf = []\n",
    "xlow = 0; xhigh = 1.2*max(sample) ; howMany = 100\n",
    "xstep = (xhigh - xlow)/howMany\n",
    "for i in range(0,howMany+1,1):\n",
    "    x.append(xlow + i*xstep)\n",
    "    yvalue = normdist(xlow + i*xstep,mu,sigma)\n",
    "    ycdf.append(yvalue) \n",
    "# Now plot the sample values and plotting position\n",
    "myfigure = matplotlib.pyplot.figure(figsize = (7,9)) # generate a object from the figure class, set aspect ratio\n",
    "matplotlib.pyplot.scatter(weibull_pp, sample ,color ='red') \n",
    "matplotlib.pyplot.plot(ycdf, x, color ='blue') \n",
    "matplotlib.pyplot.xlabel(\"Quantile Value\") \n",
    "matplotlib.pyplot.ylabel(\"Value of RV\") \n",
    "mytitle = \"Normal Distribution Data Model \\n sample mean = : \" + str(sample_mean)+ \" \\n sample variance =:\" + str(sample_variance)\n",
    "matplotlib.pyplot.title(mytitle) \n",
    "matplotlib.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter sample mean 1599\n",
      "enter sample variance 979856\n",
      "enter variable value 3900\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Non-exceedence probability 0.99\n"
     ]
    }
   ],
   "source": [
    "mymu = float(input('enter sample mean'))\n",
    "mysig = float(input('enter sample variance'))\n",
    "myval = float(input('enter variable value'))\n",
    "prob_est = normdist(myval,mymu,mysig**(0.5))\n",
    "print('Non-exceedence probability',round(prob_est,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "1. Grus, Joel (2015-04-14). Data Science from Scratch: First Principles with Python\n",
    "(Kindle Locations 1190-1191). O'Reilly Media. Kindle Edition. \n",
    "\n",
    "2. Call Expressions in \"Adhikari, A. and DeNero, J. Computational and Inferential Thinking The Foundations of Data Science\" https://www.inferentialthinking.com/chapters/03/3/Calls.html\n",
    "\n",
    "3. Functions and Tables in \"Adhikari, A. and DeNero, J. Computational and Inferential Thinking The Foundations of Data Science\" https://www.inferentialthinking.com/chapters/08/Functions_and_Tables.html\n",
    "\n",
    "4. Visualization in \"Adhikari, A. and DeNero, J. Computational and Inferential Thinking The Foundations of Data Science\" https://www.inferentialthinking.com/chapters/07/Visualization.html\n",
    "\n",
    "5. Documentation; The Python Standard Library; 9. Numeric and Mathematical Modules https://docs.python.org/2/library/math.html\n",
    "\n",
    "6. https://matplotlib.org/gallery/lines_bars_and_markers/horizontal_barchart_distribution.html?highlight=horizontal%20bar%20chart\n",
    "\n",
    "7. https://www.geeksforgeeks.org/bar-plot-in-matplotlib/"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
